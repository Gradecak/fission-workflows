// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/provenance/graph/graph.proto

/*
Package graph is a generated protocol buffer package.

It is generated from these files:
	pkg/provenance/graph/graph.proto

It has these top-level messages:
	Node
	IDs
	Provenance
*/
package graph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node_Type int32

const (
	Node_UNDEF    Node_Type = 0
	Node_WORKFLOW Node_Type = 1
	Node_ENTITY   Node_Type = 2
	Node_TASK     Node_Type = 3
)

var Node_Type_name = map[int32]string{
	0: "UNDEF",
	1: "WORKFLOW",
	2: "ENTITY",
	3: "TASK",
}
var Node_Type_value = map[string]int32{
	"UNDEF":    0,
	"WORKFLOW": 1,
	"ENTITY":   2,
	"TASK":     3,
}

func (x Node_Type) String() string {
	return proto.EnumName(Node_Type_name, int32(x))
}
func (Node_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Node_Op int32

const (
	Node_NOP       Node_Op = 0
	Node_TRANSFORM Node_Op = 1
	Node_READ      Node_Op = 2
	Node_WRITE     Node_Op = 3
	Node_CONTROL   Node_Op = 4
)

var Node_Op_name = map[int32]string{
	0: "NOP",
	1: "TRANSFORM",
	2: "READ",
	3: "WRITE",
	4: "CONTROL",
}
var Node_Op_value = map[string]int32{
	"NOP":       0,
	"TRANSFORM": 1,
	"READ":      2,
	"WRITE":     3,
	"CONTROL":   4,
}

func (x Node_Op) String() string {
	return proto.EnumName(Node_Op_name, int32(x))
}
func (Node_Op) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

// Graph structure for boradcasting provenance data, it is up to the reciever or
// a middleware layer to decode the message into a particular graph format
type Node struct {
	Type   Node_Type `protobuf:"varint,2,opt,name=type,enum=fission.workflows.provenance.Node_Type" json:"type,omitempty"`
	Op     Node_Op   `protobuf:"varint,3,opt,name=op,enum=fission.workflows.provenance.Node_Op" json:"op,omitempty"`
	Meta   string    `protobuf:"bytes,4,opt,name=meta" json:"meta,omitempty"`
	FnName string    `protobuf:"bytes,5,opt,name=fnName" json:"fnName,omitempty"`
	Task   string    `protobuf:"bytes,6,opt,name=task" json:"task,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetType() Node_Type {
	if m != nil {
		return m.Type
	}
	return Node_UNDEF
}

func (m *Node) GetOp() Node_Op {
	if m != nil {
		return m.Op
	}
	return Node_NOP
}

func (m *Node) GetMeta() string {
	if m != nil {
		return m.Meta
	}
	return ""
}

func (m *Node) GetFnName() string {
	if m != nil {
		return m.FnName
	}
	return ""
}

func (m *Node) GetTask() string {
	if m != nil {
		return m.Task
	}
	return ""
}

type IDs struct {
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
}

func (m *IDs) Reset()                    { *m = IDs{} }
func (m *IDs) String() string            { return proto.CompactTextString(m) }
func (*IDs) ProtoMessage()               {}
func (*IDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IDs) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Provenance struct {
	Nodes          map[int64]*Node  `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WfTasks        map[int64]*IDs   `protobuf:"bytes,2,rep,name=wfTasks" json:"wfTasks,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	WfPredecessors map[int64]*IDs   `protobuf:"bytes,3,rep,name=wfPredecessors" json:"wfPredecessors,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Executed       map[string]int64 `protobuf:"bytes,4,rep,name=executed" json:"executed,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Provenance) Reset()                    { *m = Provenance{} }
func (m *Provenance) String() string            { return proto.CompactTextString(m) }
func (*Provenance) ProtoMessage()               {}
func (*Provenance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Provenance) GetNodes() map[int64]*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Provenance) GetWfTasks() map[int64]*IDs {
	if m != nil {
		return m.WfTasks
	}
	return nil
}

func (m *Provenance) GetWfPredecessors() map[int64]*IDs {
	if m != nil {
		return m.WfPredecessors
	}
	return nil
}

func (m *Provenance) GetExecuted() map[string]int64 {
	if m != nil {
		return m.Executed
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "fission.workflows.provenance.Node")
	proto.RegisterType((*IDs)(nil), "fission.workflows.provenance.IDs")
	proto.RegisterType((*Provenance)(nil), "fission.workflows.provenance.Provenance")
	proto.RegisterEnum("fission.workflows.provenance.Node_Type", Node_Type_name, Node_Type_value)
	proto.RegisterEnum("fission.workflows.provenance.Node_Op", Node_Op_name, Node_Op_value)
}

func init() { proto.RegisterFile("pkg/provenance/graph/graph.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd4, 0x61, 0x6b, 0xd3, 0x40,
	0x18, 0x07, 0xf0, 0x25, 0x97, 0xb4, 0xeb, 0xd3, 0x6d, 0x1c, 0xa7, 0xe8, 0x31, 0x7c, 0x51, 0x03,
	0x62, 0x5f, 0x65, 0xd0, 0x51, 0x1d, 0x4e, 0x84, 0x6a, 0x53, 0x28, 0x9b, 0x49, 0xb9, 0x45, 0x8a,
	0xa2, 0x2f, 0x62, 0x73, 0x9d, 0x25, 0x5b, 0xee, 0xc8, 0x65, 0xab, 0xf9, 0x58, 0x7e, 0x05, 0x3f,
	0x99, 0x24, 0x37, 0xb7, 0x54, 0x46, 0xad, 0xe0, 0x9b, 0xf0, 0x24, 0x3c, 0xff, 0x5f, 0x92, 0xe7,
	0x8e, 0x83, 0x8e, 0x4c, 0xce, 0x0f, 0x64, 0x26, 0xae, 0x79, 0x1a, 0xa5, 0x33, 0x7e, 0x70, 0x9e,
	0x45, 0xf2, 0x9b, 0xbe, 0xba, 0x32, 0x13, 0xb9, 0x20, 0x4f, 0xe6, 0x0b, 0xa5, 0x16, 0x22, 0x75,
	0x97, 0x22, 0x4b, 0xe6, 0x17, 0x62, 0xa9, 0xdc, 0xbb, 0x7e, 0xe7, 0x87, 0x09, 0x96, 0x2f, 0x62,
	0x4e, 0x8e, 0xc1, 0xca, 0x0b, 0xc9, 0xa9, 0xd9, 0x31, 0xba, 0x7b, 0xbd, 0xe7, 0xee, 0xba, 0x94,
	0x5b, 0x26, 0xdc, 0xb0, 0x90, 0x9c, 0x55, 0x21, 0xd2, 0x07, 0x53, 0x48, 0x8a, 0xaa, 0xe8, 0xb3,
	0x0d, 0xa2, 0x81, 0x64, 0xa6, 0x90, 0x84, 0x80, 0x75, 0xc9, 0xf3, 0x88, 0x5a, 0x1d, 0xa3, 0xdb,
	0x62, 0x55, 0x4d, 0x1e, 0x41, 0x63, 0x9e, 0xfa, 0xd1, 0x25, 0xa7, 0x76, 0xf5, 0xf4, 0xe6, 0xae,
	0xec, 0xcd, 0x23, 0x95, 0xd0, 0x86, 0xee, 0x2d, 0x6b, 0xa7, 0x0f, 0x56, 0xf9, 0x11, 0xa4, 0x05,
	0xf6, 0x07, 0x7f, 0xe8, 0x8d, 0xf0, 0x16, 0xd9, 0x81, 0xed, 0x69, 0xc0, 0x4e, 0x46, 0xa7, 0xc1,
	0x14, 0x1b, 0x04, 0xa0, 0xe1, 0xf9, 0xe1, 0x38, 0xfc, 0x88, 0x4d, 0xb2, 0x0d, 0x56, 0x38, 0x38,
	0x3b, 0xc1, 0xc8, 0x79, 0x03, 0x66, 0x20, 0x49, 0x13, 0x90, 0x1f, 0x4c, 0xf0, 0x16, 0xd9, 0x85,
	0x56, 0xc8, 0x06, 0xfe, 0xd9, 0x28, 0x60, 0xef, 0xb1, 0x51, 0xf6, 0x31, 0x6f, 0x30, 0xc4, 0x66,
	0xc9, 0x4e, 0xd9, 0x38, 0xf4, 0x30, 0x22, 0x6d, 0x68, 0xbe, 0x0b, 0xfc, 0x90, 0x05, 0xa7, 0xd8,
	0x72, 0x1e, 0x03, 0x1a, 0x0f, 0x15, 0xc1, 0x80, 0x16, 0xb1, 0xa2, 0x46, 0x07, 0x75, 0x11, 0x2b,
	0x4b, 0xe7, 0xa7, 0x0d, 0x30, 0xb9, 0xfd, 0x55, 0x32, 0x06, 0x3b, 0x15, 0x31, 0xd7, 0x2d, 0xed,
	0xde, 0xe1, 0xfa, 0xc1, 0x4c, 0x56, 0x67, 0xa4, 0xbc, 0x34, 0xcf, 0x0a, 0xa6, 0x05, 0x12, 0x40,
	0x73, 0x39, 0x0f, 0x23, 0x95, 0x28, 0x6a, 0x56, 0x58, 0x7f, 0x63, 0x6c, 0xaa, 0x73, 0x9a, 0xfb,
	0xad, 0x90, 0x18, 0xf6, 0x96, 0xf3, 0x49, 0xc6, 0x63, 0x3e, 0xe3, 0x4a, 0x89, 0x4c, 0x51, 0x54,
	0xb9, 0xaf, 0xff, 0xc1, 0xad, 0xc7, 0x35, 0xff, 0x87, 0x49, 0x18, 0x6c, 0xf3, 0xef, 0x7c, 0x76,
	0x95, 0xf3, 0x98, 0x5a, 0x95, 0xff, 0x62, 0x63, 0xdf, 0xbb, 0x09, 0x6a, 0xf9, 0xd6, 0xd9, 0xff,
	0x0c, 0x70, 0x37, 0x9f, 0x72, 0x11, 0x12, 0x5e, 0x50, 0xa3, 0x63, 0x94, 0x8b, 0x90, 0xf0, 0x82,
	0x1c, 0x81, 0x7d, 0x1d, 0x5d, 0x5c, 0xe9, 0x9d, 0xdc, 0xee, 0x39, 0x7f, 0xdf, 0x8e, 0x4c, 0x07,
	0x5e, 0x99, 0x47, 0xc6, 0xfe, 0x17, 0xd8, 0xa9, 0x0f, 0xec, 0x1e, 0xff, 0xe5, 0xaa, 0xff, 0x74,
	0xbd, 0x3f, 0x1e, 0xaa, 0x3a, 0x1f, 0xc3, 0x83, 0x7b, 0xe6, 0xf6, 0xbf, 0xdf, 0x72, 0x0c, 0xbb,
	0x2b, 0xd3, 0xab, 0xfb, 0x2d, 0xed, 0x3f, 0xac, 0xfb, 0xa8, 0x16, 0x7e, 0xdb, 0xfc, 0x64, 0x57,
	0xc7, 0xc7, 0xd7, 0x46, 0x75, 0x7e, 0x1c, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x73, 0xc6, 0xb8,
	0xdc, 0x63, 0x04, 0x00, 0x00,
}
