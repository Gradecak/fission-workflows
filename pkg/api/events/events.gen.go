// Code generated by hack/codegen-events.py. DO NOT EDIT.
package events

import "github.com/golang/protobuf/proto"

type EventType = string

type Event interface {
	proto.Message
	Type() EventType
}

const (
	EventWorkflowCreated       EventType = "WorkflowCreated"
	EventWorkflowDeleted       EventType = "WorkflowDeleted"
	EventWorkflowParsed        EventType = "WorkflowParsed"
	EventWorkflowParsingFailed EventType = "WorkflowParsingFailed"
	EventInvocationCreated     EventType = "InvocationCreated"
	EventInvocationScheduled   EventType = "InvocationScheduled"
	EventInvocationCompleted   EventType = "InvocationCompleted"
	EventInvocationCanceled    EventType = "InvocationCanceled"
	EventInvocationTaskAdded   EventType = "InvocationTaskAdded"
	EventInvocationFailed      EventType = "InvocationFailed"
	EventInvocationEvictable   EventType = "InvocationEvictable"
	EventTaskStarted           EventType = "TaskStarted"
	EventTaskSucceeded         EventType = "TaskSucceeded"
	EventTaskSkipped           EventType = "TaskSkipped"
	EventTaskFailed            EventType = "TaskFailed"
)

func (m *WorkflowCreated) Type() EventType {
	return EventWorkflowCreated
}

func (m *WorkflowDeleted) Type() EventType {
	return EventWorkflowDeleted
}

func (m *WorkflowParsed) Type() EventType {
	return EventWorkflowParsed
}

func (m *WorkflowParsingFailed) Type() EventType {
	return EventWorkflowParsingFailed
}

func (m *InvocationCreated) Type() EventType {
	return EventInvocationCreated
}

func (m *InvocationScheduled) Type() EventType {
	return EventInvocationScheduled
}

func (m *InvocationCompleted) Type() EventType {
	return EventInvocationCompleted
}

func (m *InvocationCanceled) Type() EventType {
	return EventInvocationCanceled
}

func (m *InvocationTaskAdded) Type() EventType {
	return EventInvocationTaskAdded
}

func (m *InvocationFailed) Type() EventType {
	return EventInvocationFailed
}

func (m *InvocationEvictable) Type() EventType {
	return EventInvocationEvictable
}

func (m *TaskStarted) Type() EventType {
	return EventTaskStarted
}

func (m *TaskSucceeded) Type() EventType {
	return EventTaskSucceeded
}

func (m *TaskSkipped) Type() EventType {
	return EventTaskSkipped
}

func (m *TaskFailed) Type() EventType {
	return EventTaskFailed
}
