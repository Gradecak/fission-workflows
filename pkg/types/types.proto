syntax = "proto3";

package fission.workflows.types;
option go_package = "types";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "github.com/fission/fission-workflows/pkg/types/typedvalues/typedvalues.proto";

//
// Workflow Model
//
message Workflow {
    ObjectMetadata metadata = 1;
    WorkflowSpec spec = 2;
    WorkflowStatus status = 3;
}

// WorkflowSpec contains the definition of a workflow.
//
// Ideally the source code (json, yaml) can be converted directly to this message.
// Naming, triggers and versioning of the workflow itself is out of the scope of this data structure, which is delegated
// to the user/system upon the creation of a workflow.
message WorkflowSpec {

    // apiVersion describes what version is of the workflow definition.
    // By default the workflow engine will assume the latest version to be used.
    string apiVersion = 1;

    // Tasks contains the specs of the tasks, with the key being the task id.
    //
    // Note: Dependency graph is build into the tasks.
    map<string, TaskSpec> tasks = 2; // key = taskId

    // From which task should the workflow return the output? Future: multiple? Implicit?
    string outputTask = 3;

    string description = 4;

    // The UID that the workflow should have. Only use this in case you want to force a specific UID.
    string forceId = 5;

    // Name is solely for human-readablity
    string name = 6;

    // Internal indicates whether is a workflow should be visible to a human (default) or not.
    bool internal = 7;

    // Added with DataFlow privacy extension, specifies weather for the given
    // tasks data privacy measures should be taken. Such as verifying consent and
    // generating provenance data or region locking the execution of workflow
    DataFlowSpec dataflow = 8;

    ProvenanceMetadata provenanceMeta = 9;
}

//
// Dataflow specific configurations
//
message DataFlowSpec {

    // Indicates if consent should be verified before tasks are invoked at each
    // stage of the workflow
    bool consentCheck = 1;
    bool provenance = 2;

}

message WorkflowStatus {
    enum Status {
        QUEUED = 0;
        READY = 1;
        FAILED = 2;
        DELETED = 3;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;

    // Tasks contains the status of the tasks, with the key being the task id.
    map<string, Task> tasks = 3; // Key = taskId
    Error error = 4;
}

//
// Workflow Invocation Model
//
message WorkflowInvocation {
    ObjectMetadata metadata = 1;
    WorkflowInvocationSpec spec = 2;
    WorkflowInvocationStatus status = 3;
}

// WorkflowInvocationSpec contains the complete specification of a workflow invocation.
message WorkflowInvocationSpec {
    // WorkflowId contains a reference to the workflow that needs to be executed.
    //
    // Deprecated: use workflow.metadata.id instead to reference the workflow.
    string workflowId = 1;


    map<string, TypedValue> inputs = 2;

    // ParentId contains the id of the encapsulating workflow invocation.
    //
    // This used within the workflow engine; for user-provided workflow invocations the parentId is ignored.
    string parentId = 3;

    // Workflow contains the workflow that should be invoked.
    //
    // The workflow here is a snapshot; it should be considered immutable after added to the spec.
    Workflow workflow = 4;

    // Deadline is the timestamp before which the workflow invocation needs to be completed.
    //
    // The field is a hard deadline; any invocation exceeding the deadline specified here will be canceled.
    // Each invocation has a deadline. If no deadline is provided Fission Workflows uses a default deadline (typically
    // 10 minutes).
    google.protobuf.Timestamp Deadline = 5;

    // The value to look up in the consent store (extracted from x-consent)
    // header. If the dataflow spec calls for a consent check this field is
    // required to proceed with an invocation
    string consentId = 6;

    // Optional map of taskId's to Zones, allowing us to take into account which
    // zone a task should be executed in at RUN-TIME rather then creation time
    // if a given task identifier is not present it is ignored
    map<string, Zone> taskHints = 7;
}

message WorkflowInvocationStatus {
    enum Status {
        UNKNOWN = 0;
        SCHEDULED = 1; // Arrived at engine, but not yet scheduled
        IN_PROGRESS = 2; // Scheduled
        SUCCEEDED = 3;
        FAILED = 4;
        ABORTED = 5;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
    map<string, TaskInvocation> tasks = 3;
    TypedValue output = 4;

    // In case the task ID also exists in the workflow spec, the dynamic task will be
    // used as an overlay over the static task.
    map<string, Task> dynamicTasks = 5;
    Error error = 6; // Only set when status == failed
    TypedValue outputHeaders = 7;
}

message DependencyConfig {
    // Dependencies for this task to execute
    map<string, TaskDependencyParameters> requires = 1;

    // Number of dependencies to wait for
    int32 await = 2;
}

//
// Task Model
//
message Task {
    ObjectMetadata metadata = 1;
    TaskSpec spec = 2;
    TaskStatus status = 3;
}

// A task is the primitive unit of a workflow, representing an action that needs to be performed in order to continue.
//
// A task as a number of inputs and exactly two outputs
// Id is specified outside of TaskSpec
message TaskSpec {

    // FunctionRef contains an identifier for the function.
    //
    // This possibly ambiguous reference will be resolved to a unambiguous function reference during the workflow
    // parsing. The result of this is found in the TaskStatus.FnRef.
    string functionRef = 1;

    map<string, TypedValue> inputs = 2;

    // Dependencies for this task to execute.
    map<string, TaskDependencyParameters> requires = 3;

    // Await signals the number of dependencies to wait for before this task can be started.
    int32 await = 4;

    // Output transforms or overrides the output of the executed function.
    TypedValue output = 5;

    // OutputHeaders transforms or overrides the output headers of the executed function.
    TypedValue outputHeaders = 6;

    // Timeout specifies the the maximum runtime duration when executing this task.
    //
    // It overrides the deadline specified by the workflow invocation, but cannot exceed it. If set, this field will be
    // used in the task invocation spec to compute the deadline.
    google.protobuf.Duration timeout = 7;

    TaskDataflowSpec execConstraints = 8;

    ProvenanceMetadata provenanceMeta = 9;

}

message TaskDataflowSpec {
    Zone zoneLock = 1;
    Zone zoneHint = 2;
    bool multiZone = 3;
}

message TaskStatus {
    enum Status {
        STARTED = 0;
        READY = 1;
        FAILED = 2;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
     // The main fnRef for executing the task. Keeping this field in order to
     // preserve backward compatibility when dataflow extension is disabled
    FnRef fnRef = 3;
    Error error = 4; // Only set when status == failed

    // Alternative FnRefs that the task can be executed from if the main FnRef
    // is deemed to busy or zoneHints suggest the better alternative for execution
    // map<function-zone, FnRef>
    map<string, FnRef> altFnRefs = 5;

    // Record the original function identified in the task spec run field.
    string baseFnName = 6;
}

message TaskDependencyParameters {

    enum DependencyType {
        DATA = 0;
        CONTROL = 1;
        DYNAMIC_OUTPUT = 2;
    }
    DependencyType type = 1;
    string alias = 2;
}

//
// Task Invocation Model
//
message TaskInvocation {
    ObjectMetadata metadata = 1;
    TaskInvocationSpec spec = 2;
    TaskInvocationStatus status = 3;
}

// TaskInvocationSpec contains the complete specification of a workflow invocation.
message TaskInvocationSpec {
    // Id of the task to be invoked (no ambiguity at this point)
    FnRef fnRef = 1;

    // TaskId is the id of the task within the workflow
    //
    // Deprecated: use task.metadata.id instead to reference the workflow.
    string taskId = 2;

    // Inputs contain all inputs to the task invocation
    map<string, TypedValue> inputs = 3;

    // InvocationID contains a reference to the workflow invocation of this task.
    string invocationId = 4;

    // Task contains a snapshot of the task that needs to be run.
    Task task = 5;

    // Deadline is the timestamp before which the task invocation needs to be completed.
    //
    // The field is a hard deadline; any invocation exceeding the deadline specified here will be canceled.
    // Each task has a deadline. If no deadline is specified the task invocation inherits the deadline of the
    // invocation.
    google.protobuf.Timestamp Deadline = 6;
}

message TaskInvocationStatus {
    enum Status {
        UNKNOWN = 0;
        SCHEDULED = 1; // Arrived at engine, but not yet scheduled
        IN_PROGRESS = 2; // Scheduled
        SUCCEEDED = 3;
        FAILED = 4;
        ABORTED = 5;
        SKIPPED = 6;
    }
    Status status = 1;
    google.protobuf.Timestamp updatedAt = 2;
    TypedValue output = 3;
    Error error = 4; // Only set when status == failed
    TypedValue outputHeaders = 5;
}

//
// Common
//

// ObjectMetadata contains common metadata present for all objects in the workflow engine.
//
// It closely follows the structure of Kubernetes' ObjectMetadata, leaving out the parameters that do not fit the
// workflow model, such as namespaces, clusters, finalizers, etc.
// In the future, if it fits the model, we may move to using Kubernetes' ObjectMetadata directly.
message ObjectMetadata {

    // ID is the unique identifier, generated by the workflow engine
    string id = 1;

    // Name is an optional human-readable name of the object.
    string name = 2;

    // Created at contains the timestamp of when this object was created.
    // Typically the updatedAt field can be found in the status of the object.
    google.protobuf.Timestamp createdAt = 3;

    // Generation is a sequence identifier used and updated by the system to record the number of events or
    // changes applied to the object.
    int64 generation = 4;
}

message Error {
    string message = 1;
}

// FnRef is an immutable, unique reference to a function on a specific function runtime environment.
//
// The string representation (via String or Format): runtime://runtimeId
message FnRef {
    // Runtime is the Function Runtime environment (fnenv) that was used to resolve the function.
    string runtime = 2;

    // Namespace is the namespace of the fission function.
    string namespace = 3;

    // ID is the runtime-specific identifier of the function.
    string ID = 4;

    // the zone in which the the function execution is taking place
    Zone zone = 5;
}

// Utility wrapper for a TypedValue map
message TypedValueMap {
    map<string, TypedValue> Value = 1;
}

// Utility wrapper for a TypedValue list
message TypedValueList {
    repeated TypedValue Value = 1;
}

// An enum describing the current status of a users consent
message ConsentStatus {
    enum Status {
        GRANTED = 0;
        REVOKED = 1;
        PAUSED = 2;
    }
    Status status = 1;
}

// Graph structure for boradcasting provenance data, it is up to the reciever or
// a middleware layer to decode the message into a particular graph format
message Node {
    enum Type {
        TASK = 0;
        DATAFLOW = 1;
        ROOT = 2;
        UNDEF = 3;
    }
    Type type = 1;
    // tag is the value of the node, used to store information such as data
    // sources
    string tag = 2;
    // edges only applicable when type = Dataflow (link dataflow to tasks)
    repeated Edge edges = 4;
    // predecessor will only be applicable when Type = DATAFLOW
    string predecessor = 5;
}

message Edge {
  string edgeType = 1;
  Node dst = 2;
}

enum Zone {
    UNDEF = 0;
    NL    = 1;
    DE    = 2;
    IR    = 3;
    AU    = 4;
    FR    = 5;
}

message ProvenanceMetadata {
    // if the Task takes an input from a source outside of http invocation
    string inputSource = 1;
    // identify if workflow/task outputs to destination outside of the response produced
    string outputDest = 2;
    // a predecessor to link the workflow to.
    string predecessor = 3;
    // Operation type for task (read/write/transform etc)
    string opType = 4;
    // additional meta
    string meta = 5;
}