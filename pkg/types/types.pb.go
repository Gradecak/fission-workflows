// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/types/types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	pkg/types/types.proto

It has these top-level messages:
	Workflow
	WorkflowSpec
	DataFlowSpec
	WorkflowStatus
	WorkflowInvocation
	WorkflowInvocationSpec
	WorkflowInvocationStatus
	DependencyConfig
	Task
	TaskSpec
	TaskDataflowSpec
	TaskStatus
	TaskDependencyParameters
	TaskInvocation
	TaskInvocationSpec
	TaskInvocationStatus
	ObjectMetadata
	Error
	FnRef
	TypedValueMap
	TypedValueList
	ConsentStatus
	Node
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"
import fission_workflows_types "github.com/fission/fission-workflows/pkg/types/typedvalues"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Zone int32

const (
	Zone_UNDEF Zone = 0
	Zone_NL    Zone = 1
	Zone_DE    Zone = 2
	Zone_IR    Zone = 3
	Zone_AU    Zone = 4
	Zone_FR    Zone = 5
)

var Zone_name = map[int32]string{
	0: "UNDEF",
	1: "NL",
	2: "DE",
	3: "IR",
	4: "AU",
	5: "FR",
}
var Zone_value = map[string]int32{
	"UNDEF": 0,
	"NL":    1,
	"DE":    2,
	"IR":    3,
	"AU":    4,
	"FR":    5,
}

func (x Zone) String() string {
	return proto.EnumName(Zone_name, int32(x))
}
func (Zone) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type WorkflowStatus_Status int32

const (
	WorkflowStatus_QUEUED  WorkflowStatus_Status = 0
	WorkflowStatus_READY   WorkflowStatus_Status = 1
	WorkflowStatus_FAILED  WorkflowStatus_Status = 2
	WorkflowStatus_DELETED WorkflowStatus_Status = 3
)

var WorkflowStatus_Status_name = map[int32]string{
	0: "QUEUED",
	1: "READY",
	2: "FAILED",
	3: "DELETED",
}
var WorkflowStatus_Status_value = map[string]int32{
	"QUEUED":  0,
	"READY":   1,
	"FAILED":  2,
	"DELETED": 3,
}

func (x WorkflowStatus_Status) String() string {
	return proto.EnumName(WorkflowStatus_Status_name, int32(x))
}
func (WorkflowStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type WorkflowInvocationStatus_Status int32

const (
	WorkflowInvocationStatus_UNKNOWN     WorkflowInvocationStatus_Status = 0
	WorkflowInvocationStatus_SCHEDULED   WorkflowInvocationStatus_Status = 1
	WorkflowInvocationStatus_IN_PROGRESS WorkflowInvocationStatus_Status = 2
	WorkflowInvocationStatus_SUCCEEDED   WorkflowInvocationStatus_Status = 3
	WorkflowInvocationStatus_FAILED      WorkflowInvocationStatus_Status = 4
	WorkflowInvocationStatus_ABORTED     WorkflowInvocationStatus_Status = 5
)

var WorkflowInvocationStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SCHEDULED",
	2: "IN_PROGRESS",
	3: "SUCCEEDED",
	4: "FAILED",
	5: "ABORTED",
}
var WorkflowInvocationStatus_Status_value = map[string]int32{
	"UNKNOWN":     0,
	"SCHEDULED":   1,
	"IN_PROGRESS": 2,
	"SUCCEEDED":   3,
	"FAILED":      4,
	"ABORTED":     5,
}

func (x WorkflowInvocationStatus_Status) String() string {
	return proto.EnumName(WorkflowInvocationStatus_Status_name, int32(x))
}
func (WorkflowInvocationStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{6, 0}
}

type TaskStatus_Status int32

const (
	TaskStatus_STARTED TaskStatus_Status = 0
	TaskStatus_READY   TaskStatus_Status = 1
	TaskStatus_FAILED  TaskStatus_Status = 2
)

var TaskStatus_Status_name = map[int32]string{
	0: "STARTED",
	1: "READY",
	2: "FAILED",
}
var TaskStatus_Status_value = map[string]int32{
	"STARTED": 0,
	"READY":   1,
	"FAILED":  2,
}

func (x TaskStatus_Status) String() string {
	return proto.EnumName(TaskStatus_Status_name, int32(x))
}
func (TaskStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{11, 0} }

type TaskDependencyParameters_DependencyType int32

const (
	TaskDependencyParameters_DATA           TaskDependencyParameters_DependencyType = 0
	TaskDependencyParameters_CONTROL        TaskDependencyParameters_DependencyType = 1
	TaskDependencyParameters_DYNAMIC_OUTPUT TaskDependencyParameters_DependencyType = 2
)

var TaskDependencyParameters_DependencyType_name = map[int32]string{
	0: "DATA",
	1: "CONTROL",
	2: "DYNAMIC_OUTPUT",
}
var TaskDependencyParameters_DependencyType_value = map[string]int32{
	"DATA":           0,
	"CONTROL":        1,
	"DYNAMIC_OUTPUT": 2,
}

func (x TaskDependencyParameters_DependencyType) String() string {
	return proto.EnumName(TaskDependencyParameters_DependencyType_name, int32(x))
}
func (TaskDependencyParameters_DependencyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12, 0}
}

type TaskInvocationStatus_Status int32

const (
	TaskInvocationStatus_UNKNOWN     TaskInvocationStatus_Status = 0
	TaskInvocationStatus_SCHEDULED   TaskInvocationStatus_Status = 1
	TaskInvocationStatus_IN_PROGRESS TaskInvocationStatus_Status = 2
	TaskInvocationStatus_SUCCEEDED   TaskInvocationStatus_Status = 3
	TaskInvocationStatus_FAILED      TaskInvocationStatus_Status = 4
	TaskInvocationStatus_ABORTED     TaskInvocationStatus_Status = 5
	TaskInvocationStatus_SKIPPED     TaskInvocationStatus_Status = 6
)

var TaskInvocationStatus_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "SCHEDULED",
	2: "IN_PROGRESS",
	3: "SUCCEEDED",
	4: "FAILED",
	5: "ABORTED",
	6: "SKIPPED",
}
var TaskInvocationStatus_Status_value = map[string]int32{
	"UNKNOWN":     0,
	"SCHEDULED":   1,
	"IN_PROGRESS": 2,
	"SUCCEEDED":   3,
	"FAILED":      4,
	"ABORTED":     5,
	"SKIPPED":     6,
}

func (x TaskInvocationStatus_Status) String() string {
	return proto.EnumName(TaskInvocationStatus_Status_name, int32(x))
}
func (TaskInvocationStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15, 0}
}

type ConsentStatus_Status int32

const (
	ConsentStatus_GRANTED ConsentStatus_Status = 0
	ConsentStatus_REVOKED ConsentStatus_Status = 1
	ConsentStatus_PAUSED  ConsentStatus_Status = 2
)

var ConsentStatus_Status_name = map[int32]string{
	0: "GRANTED",
	1: "REVOKED",
	2: "PAUSED",
}
var ConsentStatus_Status_value = map[string]int32{
	"GRANTED": 0,
	"REVOKED": 1,
	"PAUSED":  2,
}

func (x ConsentStatus_Status) String() string {
	return proto.EnumName(ConsentStatus_Status_name, int32(x))
}
func (ConsentStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{21, 0} }

type Node_Type int32

const (
	Node_TASK     Node_Type = 0
	Node_DATAFLOW Node_Type = 1
	Node_ROOT     Node_Type = 2
	Node_UNDEF    Node_Type = 3
)

var Node_Type_name = map[int32]string{
	0: "TASK",
	1: "DATAFLOW",
	2: "ROOT",
	3: "UNDEF",
}
var Node_Type_value = map[string]int32{
	"TASK":     0,
	"DATAFLOW": 1,
	"ROOT":     2,
	"UNDEF":    3,
}

func (x Node_Type) String() string {
	return proto.EnumName(Node_Type_name, int32(x))
}
func (Node_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

//
// Workflow Model
//
type Workflow struct {
	Metadata *ObjectMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *WorkflowSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *WorkflowStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Workflow) Reset()                    { *m = Workflow{} }
func (m *Workflow) String() string            { return proto.CompactTextString(m) }
func (*Workflow) ProtoMessage()               {}
func (*Workflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Workflow) GetMetadata() *ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Workflow) GetSpec() *WorkflowSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Workflow) GetStatus() *WorkflowStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// WorkflowSpec contains the definition of a workflow.
//
// Ideally the source code (json, yaml) can be converted directly to this message.
// Naming, triggers and versioning of the workflow itself is out of the scope of this data structure, which is delegated
// to the user/system upon the creation of a workflow.
type WorkflowSpec struct {
	// apiVersion describes what version is of the workflow definition.
	// By default the workflow engine will assume the latest version to be used.
	ApiVersion string `protobuf:"bytes,1,opt,name=apiVersion" json:"apiVersion,omitempty"`
	// Tasks contains the specs of the tasks, with the key being the task id.
	//
	// Note: Dependency graph is build into the tasks.
	Tasks map[string]*TaskSpec `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// From which task should the workflow return the output? Future: multiple? Implicit?
	OutputTask  string `protobuf:"bytes,3,opt,name=outputTask" json:"outputTask,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	// The UID that the workflow should have. Only use this in case you want to force a specific UID.
	ForceId string `protobuf:"bytes,5,opt,name=forceId" json:"forceId,omitempty"`
	// Name is solely for human-readablity
	Name string `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	// Internal indicates whether is a workflow should be visible to a human (default) or not.
	Internal bool `protobuf:"varint,7,opt,name=internal" json:"internal,omitempty"`
	// Added with DataFlow privacy extension, specifies weather for the given
	// tasks data privacy measures should be taken. Such as verifying consent and
	// generating provenance data or region locking the execution of workflow
	Dataflow *DataFlowSpec `protobuf:"bytes,8,opt,name=dataflow" json:"dataflow,omitempty"`
}

func (m *WorkflowSpec) Reset()                    { *m = WorkflowSpec{} }
func (m *WorkflowSpec) String() string            { return proto.CompactTextString(m) }
func (*WorkflowSpec) ProtoMessage()               {}
func (*WorkflowSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *WorkflowSpec) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *WorkflowSpec) GetTasks() map[string]*TaskSpec {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowSpec) GetOutputTask() string {
	if m != nil {
		return m.OutputTask
	}
	return ""
}

func (m *WorkflowSpec) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *WorkflowSpec) GetForceId() string {
	if m != nil {
		return m.ForceId
	}
	return ""
}

func (m *WorkflowSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WorkflowSpec) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *WorkflowSpec) GetDataflow() *DataFlowSpec {
	if m != nil {
		return m.Dataflow
	}
	return nil
}

//
// Dataflow specific configurations
//
type DataFlowSpec struct {
	// Indicates if consent should be verified before tasks are invoked at each
	// stage of the workflow
	ConsentCheck bool `protobuf:"varint,1,opt,name=consentCheck" json:"consentCheck,omitempty"`
	Provenance   bool `protobuf:"varint,2,opt,name=provenance" json:"provenance,omitempty"`
}

func (m *DataFlowSpec) Reset()                    { *m = DataFlowSpec{} }
func (m *DataFlowSpec) String() string            { return proto.CompactTextString(m) }
func (*DataFlowSpec) ProtoMessage()               {}
func (*DataFlowSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DataFlowSpec) GetConsentCheck() bool {
	if m != nil {
		return m.ConsentCheck
	}
	return false
}

func (m *DataFlowSpec) GetProvenance() bool {
	if m != nil {
		return m.Provenance
	}
	return false
}

type WorkflowStatus struct {
	Status    WorkflowStatus_Status      `protobuf:"varint,1,opt,name=status,enum=fission.workflows.types.WorkflowStatus_Status" json:"status,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// Tasks contains the status of the tasks, with the key being the task id.
	Tasks map[string]*Task `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error *Error           `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *WorkflowStatus) Reset()                    { *m = WorkflowStatus{} }
func (m *WorkflowStatus) String() string            { return proto.CompactTextString(m) }
func (*WorkflowStatus) ProtoMessage()               {}
func (*WorkflowStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WorkflowStatus) GetStatus() WorkflowStatus_Status {
	if m != nil {
		return m.Status
	}
	return WorkflowStatus_QUEUED
}

func (m *WorkflowStatus) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *WorkflowStatus) GetTasks() map[string]*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

//
// Workflow Invocation Model
//
type WorkflowInvocation struct {
	Metadata *ObjectMetadata           `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *WorkflowInvocationSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *WorkflowInvocationStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *WorkflowInvocation) Reset()                    { *m = WorkflowInvocation{} }
func (m *WorkflowInvocation) String() string            { return proto.CompactTextString(m) }
func (*WorkflowInvocation) ProtoMessage()               {}
func (*WorkflowInvocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *WorkflowInvocation) GetMetadata() *ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *WorkflowInvocation) GetSpec() *WorkflowInvocationSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *WorkflowInvocation) GetStatus() *WorkflowInvocationStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// WorkflowInvocationSpec contains the complete specification of a workflow invocation.
type WorkflowInvocationSpec struct {
	// WorkflowId contains a reference to the workflow that needs to be executed.
	//
	// Deprecated: use workflow.metadata.id instead to reference the workflow.
	WorkflowId string                                         `protobuf:"bytes,1,opt,name=workflowId" json:"workflowId,omitempty"`
	Inputs     map[string]*fission_workflows_types.TypedValue `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// ParentId contains the id of the encapsulating workflow invocation.
	//
	// This used within the workflow engine; for user-provided workflow invocations the parentId is ignored.
	ParentId string `protobuf:"bytes,3,opt,name=parentId" json:"parentId,omitempty"`
	// Workflow contains the workflow that should be invoked.
	//
	// The workflow here is a snapshot; it should be considered immutable after added to the spec.
	Workflow *Workflow `protobuf:"bytes,4,opt,name=workflow" json:"workflow,omitempty"`
	// Deadline is the timestamp before which the workflow invocation needs to be completed.
	//
	// The field is a hard deadline; any invocation exceeding the deadline specified here will be canceled.
	// Each invocation has a deadline. If no deadline is provided Fission Workflows uses a default deadline (typically
	// 10 minutes).
	Deadline *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=Deadline" json:"Deadline,omitempty"`
	// The value to look up in the consent store (extracted from x-consent)
	// header. If the dataflow spec calls for a consent check this field is
	// required to proceed with an invocation
	ConsentId string `protobuf:"bytes,6,opt,name=consentId" json:"consentId,omitempty"`
}

func (m *WorkflowInvocationSpec) Reset()                    { *m = WorkflowInvocationSpec{} }
func (m *WorkflowInvocationSpec) String() string            { return proto.CompactTextString(m) }
func (*WorkflowInvocationSpec) ProtoMessage()               {}
func (*WorkflowInvocationSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WorkflowInvocationSpec) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *WorkflowInvocationSpec) GetInputs() map[string]*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *WorkflowInvocationSpec) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *WorkflowInvocationSpec) GetWorkflow() *Workflow {
	if m != nil {
		return m.Workflow
	}
	return nil
}

func (m *WorkflowInvocationSpec) GetDeadline() *google_protobuf.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *WorkflowInvocationSpec) GetConsentId() string {
	if m != nil {
		return m.ConsentId
	}
	return ""
}

type WorkflowInvocationStatus struct {
	Status    WorkflowInvocationStatus_Status     `protobuf:"varint,1,opt,name=status,enum=fission.workflows.types.WorkflowInvocationStatus_Status" json:"status,omitempty"`
	UpdatedAt *google_protobuf.Timestamp          `protobuf:"bytes,2,opt,name=updatedAt" json:"updatedAt,omitempty"`
	Tasks     map[string]*TaskInvocation          `protobuf:"bytes,3,rep,name=tasks" json:"tasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Output    *fission_workflows_types.TypedValue `protobuf:"bytes,4,opt,name=output" json:"output,omitempty"`
	// In case the task ID also exists in the workflow spec, the dynamic task will be
	// used as an overlay over the static task.
	DynamicTasks  map[string]*Task                    `protobuf:"bytes,5,rep,name=dynamicTasks" json:"dynamicTasks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Error         *Error                              `protobuf:"bytes,6,opt,name=error" json:"error,omitempty"`
	OutputHeaders *fission_workflows_types.TypedValue `protobuf:"bytes,7,opt,name=outputHeaders" json:"outputHeaders,omitempty"`
}

func (m *WorkflowInvocationStatus) Reset()                    { *m = WorkflowInvocationStatus{} }
func (m *WorkflowInvocationStatus) String() string            { return proto.CompactTextString(m) }
func (*WorkflowInvocationStatus) ProtoMessage()               {}
func (*WorkflowInvocationStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WorkflowInvocationStatus) GetStatus() WorkflowInvocationStatus_Status {
	if m != nil {
		return m.Status
	}
	return WorkflowInvocationStatus_UNKNOWN
}

func (m *WorkflowInvocationStatus) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *WorkflowInvocationStatus) GetTasks() map[string]*TaskInvocation {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *WorkflowInvocationStatus) GetOutput() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *WorkflowInvocationStatus) GetDynamicTasks() map[string]*Task {
	if m != nil {
		return m.DynamicTasks
	}
	return nil
}

func (m *WorkflowInvocationStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *WorkflowInvocationStatus) GetOutputHeaders() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.OutputHeaders
	}
	return nil
}

type DependencyConfig struct {
	// Dependencies for this task to execute
	Requires map[string]*TaskDependencyParameters `protobuf:"bytes,1,rep,name=requires" json:"requires,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Number of dependencies to wait for
	Await int32 `protobuf:"varint,2,opt,name=await" json:"await,omitempty"`
}

func (m *DependencyConfig) Reset()                    { *m = DependencyConfig{} }
func (m *DependencyConfig) String() string            { return proto.CompactTextString(m) }
func (*DependencyConfig) ProtoMessage()               {}
func (*DependencyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DependencyConfig) GetRequires() map[string]*TaskDependencyParameters {
	if m != nil {
		return m.Requires
	}
	return nil
}

func (m *DependencyConfig) GetAwait() int32 {
	if m != nil {
		return m.Await
	}
	return 0
}

//
// Task Model
//
type Task struct {
	Metadata *ObjectMetadata `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *TaskSpec       `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *TaskStatus     `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Task) GetMetadata() *ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Task) GetSpec() *TaskSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Task) GetStatus() *TaskStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// A task is the primitive unit of a workflow, representing an action that needs to be performed in order to continue.
//
// A task as a number of inputs and exactly two outputs
// Id is specified outside of TaskSpec
type TaskSpec struct {
	// FunctionRef contains an identifier for the function.
	//
	// This possibly ambiguous reference will be resolved to a unambiguous function reference during the workflow
	// parsing. The result of this is found in the TaskStatus.FnRef.
	FunctionRef string                                         `protobuf:"bytes,1,opt,name=functionRef" json:"functionRef,omitempty"`
	Inputs      map[string]*fission_workflows_types.TypedValue `protobuf:"bytes,2,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Dependencies for this task to execute.
	Requires map[string]*TaskDependencyParameters `protobuf:"bytes,3,rep,name=requires" json:"requires,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Await signals the number of dependencies to wait for before this task can be started.
	Await int32 `protobuf:"varint,4,opt,name=await" json:"await,omitempty"`
	// Output transforms or overrides the output of the executed function.
	Output *fission_workflows_types.TypedValue `protobuf:"bytes,5,opt,name=output" json:"output,omitempty"`
	// OutputHeaders transforms or overrides the output headers of the executed function.
	OutputHeaders *fission_workflows_types.TypedValue `protobuf:"bytes,6,opt,name=outputHeaders" json:"outputHeaders,omitempty"`
	// Timeout specifies the the maximum runtime duration when executing this task.
	//
	// It overrides the deadline specified by the workflow invocation, but cannot exceed it. If set, this field will be
	// used in the task invocation spec to compute the deadline.
	Timeout         *google_protobuf1.Duration `protobuf:"bytes,7,opt,name=timeout" json:"timeout,omitempty"`
	ExecConstraints *TaskDataflowSpec          `protobuf:"bytes,8,opt,name=execConstraints" json:"execConstraints,omitempty"`
}

func (m *TaskSpec) Reset()                    { *m = TaskSpec{} }
func (m *TaskSpec) String() string            { return proto.CompactTextString(m) }
func (*TaskSpec) ProtoMessage()               {}
func (*TaskSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TaskSpec) GetFunctionRef() string {
	if m != nil {
		return m.FunctionRef
	}
	return ""
}

func (m *TaskSpec) GetInputs() map[string]*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TaskSpec) GetRequires() map[string]*TaskDependencyParameters {
	if m != nil {
		return m.Requires
	}
	return nil
}

func (m *TaskSpec) GetAwait() int32 {
	if m != nil {
		return m.Await
	}
	return 0
}

func (m *TaskSpec) GetOutput() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TaskSpec) GetOutputHeaders() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.OutputHeaders
	}
	return nil
}

func (m *TaskSpec) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *TaskSpec) GetExecConstraints() *TaskDataflowSpec {
	if m != nil {
		return m.ExecConstraints
	}
	return nil
}

type TaskDataflowSpec struct {
	ZoneLock  Zone `protobuf:"varint,1,opt,name=zoneLock,enum=fission.workflows.types.Zone" json:"zoneLock,omitempty"`
	ZoneHint  Zone `protobuf:"varint,2,opt,name=zoneHint,enum=fission.workflows.types.Zone" json:"zoneHint,omitempty"`
	MultiZone bool `protobuf:"varint,3,opt,name=multiZone" json:"multiZone,omitempty"`
}

func (m *TaskDataflowSpec) Reset()                    { *m = TaskDataflowSpec{} }
func (m *TaskDataflowSpec) String() string            { return proto.CompactTextString(m) }
func (*TaskDataflowSpec) ProtoMessage()               {}
func (*TaskDataflowSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TaskDataflowSpec) GetZoneLock() Zone {
	if m != nil {
		return m.ZoneLock
	}
	return Zone_UNDEF
}

func (m *TaskDataflowSpec) GetZoneHint() Zone {
	if m != nil {
		return m.ZoneHint
	}
	return Zone_UNDEF
}

func (m *TaskDataflowSpec) GetMultiZone() bool {
	if m != nil {
		return m.MultiZone
	}
	return false
}

type TaskStatus struct {
	Status    TaskStatus_Status          `protobuf:"varint,1,opt,name=status,enum=fission.workflows.types.TaskStatus_Status" json:"status,omitempty"`
	UpdatedAt *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=updatedAt" json:"updatedAt,omitempty"`
	// The main fnRef for executing the task. Keeping this field in order to
	// preserve backward compatibility when dataflow extension is disabled
	FnRef *FnRef `protobuf:"bytes,3,opt,name=fnRef" json:"fnRef,omitempty"`
	Error *Error `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// Alternative FnRefs that the task can be executed from if the main FnRef
	// is deemed to busy or zoneHints suggest the better alternative for execution
	// map<function-zone, FnRef>
	AltFnRefs map[string]*FnRef `protobuf:"bytes,5,rep,name=altFnRefs" json:"altFnRefs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TaskStatus) Reset()                    { *m = TaskStatus{} }
func (m *TaskStatus) String() string            { return proto.CompactTextString(m) }
func (*TaskStatus) ProtoMessage()               {}
func (*TaskStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TaskStatus) GetStatus() TaskStatus_Status {
	if m != nil {
		return m.Status
	}
	return TaskStatus_STARTED
}

func (m *TaskStatus) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TaskStatus) GetFnRef() *FnRef {
	if m != nil {
		return m.FnRef
	}
	return nil
}

func (m *TaskStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TaskStatus) GetAltFnRefs() map[string]*FnRef {
	if m != nil {
		return m.AltFnRefs
	}
	return nil
}

type TaskDependencyParameters struct {
	Type  TaskDependencyParameters_DependencyType `protobuf:"varint,1,opt,name=type,enum=fission.workflows.types.TaskDependencyParameters_DependencyType" json:"type,omitempty"`
	Alias string                                  `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
}

func (m *TaskDependencyParameters) Reset()                    { *m = TaskDependencyParameters{} }
func (m *TaskDependencyParameters) String() string            { return proto.CompactTextString(m) }
func (*TaskDependencyParameters) ProtoMessage()               {}
func (*TaskDependencyParameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TaskDependencyParameters) GetType() TaskDependencyParameters_DependencyType {
	if m != nil {
		return m.Type
	}
	return TaskDependencyParameters_DATA
}

func (m *TaskDependencyParameters) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

//
// Task Invocation Model
//
type TaskInvocation struct {
	Metadata *ObjectMetadata       `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	Spec     *TaskInvocationSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status   *TaskInvocationStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *TaskInvocation) Reset()                    { *m = TaskInvocation{} }
func (m *TaskInvocation) String() string            { return proto.CompactTextString(m) }
func (*TaskInvocation) ProtoMessage()               {}
func (*TaskInvocation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TaskInvocation) GetMetadata() *ObjectMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TaskInvocation) GetSpec() *TaskInvocationSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TaskInvocation) GetStatus() *TaskInvocationStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// TaskInvocationSpec contains the complete specification of a workflow invocation.
type TaskInvocationSpec struct {
	// Id of the task to be invoked (no ambiguity at this point)
	FnRef *FnRef `protobuf:"bytes,1,opt,name=fnRef" json:"fnRef,omitempty"`
	// TaskId is the id of the task within the workflow
	//
	// Deprecated: use task.metadata.id instead to reference the workflow.
	TaskId string `protobuf:"bytes,2,opt,name=taskId" json:"taskId,omitempty"`
	// Inputs contain all inputs to the task invocation
	Inputs map[string]*fission_workflows_types.TypedValue `protobuf:"bytes,3,rep,name=inputs" json:"inputs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// InvocationID contains a reference to the workflow invocation of this task.
	InvocationId string `protobuf:"bytes,4,opt,name=invocationId" json:"invocationId,omitempty"`
	// Task contains a snapshot of the task that needs to be run.
	Task *Task `protobuf:"bytes,5,opt,name=task" json:"task,omitempty"`
	// Deadline is the timestamp before which the task invocation needs to be completed.
	//
	// The field is a hard deadline; any invocation exceeding the deadline specified here will be canceled.
	// Each task has a deadline. If no deadline is specified the task invocation inherits the deadline of the
	// invocation.
	Deadline *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=Deadline" json:"Deadline,omitempty"`
}

func (m *TaskInvocationSpec) Reset()                    { *m = TaskInvocationSpec{} }
func (m *TaskInvocationSpec) String() string            { return proto.CompactTextString(m) }
func (*TaskInvocationSpec) ProtoMessage()               {}
func (*TaskInvocationSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TaskInvocationSpec) GetFnRef() *FnRef {
	if m != nil {
		return m.FnRef
	}
	return nil
}

func (m *TaskInvocationSpec) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *TaskInvocationSpec) GetInputs() map[string]*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *TaskInvocationSpec) GetInvocationId() string {
	if m != nil {
		return m.InvocationId
	}
	return ""
}

func (m *TaskInvocationSpec) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *TaskInvocationSpec) GetDeadline() *google_protobuf.Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

type TaskInvocationStatus struct {
	Status        TaskInvocationStatus_Status         `protobuf:"varint,1,opt,name=status,enum=fission.workflows.types.TaskInvocationStatus_Status" json:"status,omitempty"`
	UpdatedAt     *google_protobuf.Timestamp          `protobuf:"bytes,2,opt,name=updatedAt" json:"updatedAt,omitempty"`
	Output        *fission_workflows_types.TypedValue `protobuf:"bytes,3,opt,name=output" json:"output,omitempty"`
	Error         *Error                              `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	OutputHeaders *fission_workflows_types.TypedValue `protobuf:"bytes,5,opt,name=outputHeaders" json:"outputHeaders,omitempty"`
}

func (m *TaskInvocationStatus) Reset()                    { *m = TaskInvocationStatus{} }
func (m *TaskInvocationStatus) String() string            { return proto.CompactTextString(m) }
func (*TaskInvocationStatus) ProtoMessage()               {}
func (*TaskInvocationStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *TaskInvocationStatus) GetStatus() TaskInvocationStatus_Status {
	if m != nil {
		return m.Status
	}
	return TaskInvocationStatus_UNKNOWN
}

func (m *TaskInvocationStatus) GetUpdatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *TaskInvocationStatus) GetOutput() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *TaskInvocationStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *TaskInvocationStatus) GetOutputHeaders() *fission_workflows_types.TypedValue {
	if m != nil {
		return m.OutputHeaders
	}
	return nil
}

// ObjectMetadata contains common metadata present for all objects in the workflow engine.
//
// It closely follows the structure of Kubernetes' ObjectMetadata, leaving out the parameters that do not fit the
// workflow model, such as namespaces, clusters, finalizers, etc.
// In the future, if it fits the model, we may move to using Kubernetes' ObjectMetadata directly.
type ObjectMetadata struct {
	// ID is the unique identifier, generated by the workflow engine
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Name is an optional human-readable name of the object.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Created at contains the timestamp of when this object was created.
	// Typically the updatedAt field can be found in the status of the object.
	CreatedAt *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=createdAt" json:"createdAt,omitempty"`
	// Generation is a sequence identifier used and updated by the system to record the number of events or
	// changes applied to the object.
	Generation int64 `protobuf:"varint,4,opt,name=generation" json:"generation,omitempty"`
}

func (m *ObjectMetadata) Reset()                    { *m = ObjectMetadata{} }
func (m *ObjectMetadata) String() string            { return proto.CompactTextString(m) }
func (*ObjectMetadata) ProtoMessage()               {}
func (*ObjectMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ObjectMetadata) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectMetadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectMetadata) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ObjectMetadata) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

type Error struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// FnRef is an immutable, unique reference to a function on a specific function runtime environment.
//
// The string representation (via String or Format): runtime://runtimeId
type FnRef struct {
	// Runtime is the Function Runtime environment (fnenv) that was used to resolve the function.
	Runtime string `protobuf:"bytes,2,opt,name=runtime" json:"runtime,omitempty"`
	// Namespace is the namespace of the fission function.
	Namespace string `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	// ID is the runtime-specific identifier of the function.
	ID string `protobuf:"bytes,4,opt,name=ID" json:"ID,omitempty"`
	// the zone in which the the function execution is taking place
	Zone Zone `protobuf:"varint,5,opt,name=zone,enum=fission.workflows.types.Zone" json:"zone,omitempty"`
}

func (m *FnRef) Reset()                    { *m = FnRef{} }
func (m *FnRef) String() string            { return proto.CompactTextString(m) }
func (*FnRef) ProtoMessage()               {}
func (*FnRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FnRef) GetRuntime() string {
	if m != nil {
		return m.Runtime
	}
	return ""
}

func (m *FnRef) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *FnRef) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *FnRef) GetZone() Zone {
	if m != nil {
		return m.Zone
	}
	return Zone_UNDEF
}

// Utility wrapper for a TypedValue map
type TypedValueMap struct {
	Value map[string]*fission_workflows_types.TypedValue `protobuf:"bytes,1,rep,name=Value" json:"Value,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TypedValueMap) Reset()                    { *m = TypedValueMap{} }
func (m *TypedValueMap) String() string            { return proto.CompactTextString(m) }
func (*TypedValueMap) ProtoMessage()               {}
func (*TypedValueMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *TypedValueMap) GetValue() map[string]*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// Utility wrapper for a TypedValue list
type TypedValueList struct {
	Value []*fission_workflows_types.TypedValue `protobuf:"bytes,1,rep,name=Value" json:"Value,omitempty"`
}

func (m *TypedValueList) Reset()                    { *m = TypedValueList{} }
func (m *TypedValueList) String() string            { return proto.CompactTextString(m) }
func (*TypedValueList) ProtoMessage()               {}
func (*TypedValueList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *TypedValueList) GetValue() []*fission_workflows_types.TypedValue {
	if m != nil {
		return m.Value
	}
	return nil
}

// An enum describing the current status of a users consent
type ConsentStatus struct {
	Status ConsentStatus_Status `protobuf:"varint,1,opt,name=status,enum=fission.workflows.types.ConsentStatus_Status" json:"status,omitempty"`
}

func (m *ConsentStatus) Reset()                    { *m = ConsentStatus{} }
func (m *ConsentStatus) String() string            { return proto.CompactTextString(m) }
func (*ConsentStatus) ProtoMessage()               {}
func (*ConsentStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConsentStatus) GetStatus() ConsentStatus_Status {
	if m != nil {
		return m.Status
	}
	return ConsentStatus_GRANTED
}

type Node struct {
	Type Node_Type `protobuf:"varint,1,opt,name=type,enum=fission.workflows.types.Node_Type" json:"type,omitempty"`
	// tag is the value of the node, used to store information such as data
	// sources
	Tag string `protobuf:"bytes,2,opt,name=tag" json:"tag,omitempty"`
	// edges only applicable when type = Dataflow (link dataflow to tasks)
	Edges []*Node `protobuf:"bytes,4,rep,name=edges" json:"edges,omitempty"`
	// predecessor will only be applicable when Type = DATAFLOW
	Predecessor *Node `protobuf:"bytes,5,opt,name=predecessor" json:"predecessor,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Node) GetType() Node_Type {
	if m != nil {
		return m.Type
	}
	return Node_TASK
}

func (m *Node) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *Node) GetEdges() []*Node {
	if m != nil {
		return m.Edges
	}
	return nil
}

func (m *Node) GetPredecessor() *Node {
	if m != nil {
		return m.Predecessor
	}
	return nil
}

func init() {
	proto.RegisterType((*Workflow)(nil), "fission.workflows.types.Workflow")
	proto.RegisterType((*WorkflowSpec)(nil), "fission.workflows.types.WorkflowSpec")
	proto.RegisterType((*DataFlowSpec)(nil), "fission.workflows.types.DataFlowSpec")
	proto.RegisterType((*WorkflowStatus)(nil), "fission.workflows.types.WorkflowStatus")
	proto.RegisterType((*WorkflowInvocation)(nil), "fission.workflows.types.WorkflowInvocation")
	proto.RegisterType((*WorkflowInvocationSpec)(nil), "fission.workflows.types.WorkflowInvocationSpec")
	proto.RegisterType((*WorkflowInvocationStatus)(nil), "fission.workflows.types.WorkflowInvocationStatus")
	proto.RegisterType((*DependencyConfig)(nil), "fission.workflows.types.DependencyConfig")
	proto.RegisterType((*Task)(nil), "fission.workflows.types.Task")
	proto.RegisterType((*TaskSpec)(nil), "fission.workflows.types.TaskSpec")
	proto.RegisterType((*TaskDataflowSpec)(nil), "fission.workflows.types.TaskDataflowSpec")
	proto.RegisterType((*TaskStatus)(nil), "fission.workflows.types.TaskStatus")
	proto.RegisterType((*TaskDependencyParameters)(nil), "fission.workflows.types.TaskDependencyParameters")
	proto.RegisterType((*TaskInvocation)(nil), "fission.workflows.types.TaskInvocation")
	proto.RegisterType((*TaskInvocationSpec)(nil), "fission.workflows.types.TaskInvocationSpec")
	proto.RegisterType((*TaskInvocationStatus)(nil), "fission.workflows.types.TaskInvocationStatus")
	proto.RegisterType((*ObjectMetadata)(nil), "fission.workflows.types.ObjectMetadata")
	proto.RegisterType((*Error)(nil), "fission.workflows.types.Error")
	proto.RegisterType((*FnRef)(nil), "fission.workflows.types.FnRef")
	proto.RegisterType((*TypedValueMap)(nil), "fission.workflows.types.TypedValueMap")
	proto.RegisterType((*TypedValueList)(nil), "fission.workflows.types.TypedValueList")
	proto.RegisterType((*ConsentStatus)(nil), "fission.workflows.types.ConsentStatus")
	proto.RegisterType((*Node)(nil), "fission.workflows.types.Node")
	proto.RegisterEnum("fission.workflows.types.Zone", Zone_name, Zone_value)
	proto.RegisterEnum("fission.workflows.types.WorkflowStatus_Status", WorkflowStatus_Status_name, WorkflowStatus_Status_value)
	proto.RegisterEnum("fission.workflows.types.WorkflowInvocationStatus_Status", WorkflowInvocationStatus_Status_name, WorkflowInvocationStatus_Status_value)
	proto.RegisterEnum("fission.workflows.types.TaskStatus_Status", TaskStatus_Status_name, TaskStatus_Status_value)
	proto.RegisterEnum("fission.workflows.types.TaskDependencyParameters_DependencyType", TaskDependencyParameters_DependencyType_name, TaskDependencyParameters_DependencyType_value)
	proto.RegisterEnum("fission.workflows.types.TaskInvocationStatus_Status", TaskInvocationStatus_Status_name, TaskInvocationStatus_Status_value)
	proto.RegisterEnum("fission.workflows.types.ConsentStatus_Status", ConsentStatus_Status_name, ConsentStatus_Status_value)
	proto.RegisterEnum("fission.workflows.types.Node_Type", Node_Type_name, Node_Type_value)
}

func init() { proto.RegisterFile("pkg/types/types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1871 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x41, 0x93, 0xdb, 0x48,
	0x15, 0x1e, 0x59, 0x96, 0xc7, 0x7e, 0x9e, 0xf1, 0x8a, 0xae, 0x65, 0x31, 0x2e, 0x36, 0x24, 0xda,
	0xa2, 0x36, 0x2c, 0x44, 0x43, 0x26, 0x61, 0x77, 0x42, 0xd8, 0x0a, 0x8e, 0xa5, 0x49, 0x54, 0x33,
	0xb1, 0x87, 0xb6, 0x9d, 0xd4, 0x2e, 0xec, 0x6e, 0x75, 0xa4, 0x1e, 0xaf, 0x76, 0xc6, 0x92, 0x90,
	0xe4, 0x84, 0xe1, 0xc8, 0x81, 0x23, 0x3f, 0x81, 0x03, 0x55, 0xf0, 0x17, 0xe0, 0xc6, 0x61, 0x2f,
	0x54, 0x71, 0xe5, 0xca, 0x0f, 0xe0, 0xc0, 0x2f, 0xe0, 0x42, 0x75, 0xab, 0x65, 0x49, 0xf6, 0x78,
	0x6c, 0x4f, 0x39, 0x5c, 0x6c, 0x75, 0xeb, 0xbd, 0xd7, 0xaf, 0xfb, 0x7d, 0xef, 0x7b, 0xaf, 0x05,
	0xdf, 0x0c, 0xce, 0x46, 0x7b, 0xf1, 0x45, 0x40, 0xa3, 0xe4, 0x57, 0x0f, 0x42, 0x3f, 0xf6, 0xd1,
	0xb7, 0x4e, 0xdd, 0x28, 0x72, 0x7d, 0x4f, 0x7f, 0xed, 0x87, 0x67, 0xa7, 0xe7, 0xfe, 0xeb, 0x48,
	0xe7, 0xaf, 0x5b, 0xdf, 0x1d, 0xf9, 0xfe, 0xe8, 0x9c, 0xee, 0x71, 0xb1, 0x97, 0x93, 0xd3, 0xbd,
	0xd8, 0x1d, 0xd3, 0x28, 0x26, 0xe3, 0x20, 0xd1, 0x6c, 0xdd, 0x98, 0x15, 0x70, 0x26, 0x21, 0x89,
	0x99, 0xa9, 0xe4, 0xfd, 0xf1, 0xc8, 0x8d, 0xbf, 0x9c, 0xbc, 0xd4, 0x6d, 0x7f, 0xbc, 0x27, 0x16,
	0x49, 0xff, 0xef, 0x4c, 0x17, 0xdb, 0x2b, 0x7a, 0xe5, 0xbc, 0x22, 0xe7, 0x93, 0xe2, 0x73, 0x62,
	0x4d, 0xfb, 0x87, 0x04, 0xd5, 0x17, 0x42, 0x0b, 0x75, 0xa0, 0x3a, 0xa6, 0x31, 0x71, 0x48, 0x4c,
	0x9a, 0xd2, 0x4d, 0xe9, 0x76, 0x7d, 0xff, 0x7d, 0x7d, 0xc1, 0x3e, 0xf4, 0xde, 0xcb, 0xaf, 0xa8,
	0x1d, 0x3f, 0x13, 0xe2, 0x78, 0xaa, 0x88, 0x1e, 0x40, 0x39, 0x0a, 0xa8, 0xdd, 0x2c, 0x71, 0x03,
	0xdf, 0x5b, 0x68, 0x20, 0x5d, 0xb5, 0x1f, 0x50, 0x1b, 0x73, 0x15, 0xf4, 0x08, 0x2a, 0x51, 0x4c,
	0xe2, 0x49, 0xd4, 0x94, 0x97, 0xac, 0x3e, 0x55, 0xe6, 0xe2, 0x58, 0xa8, 0x69, 0x7f, 0x94, 0x61,
	0x27, 0x6f, 0x17, 0xdd, 0x00, 0x20, 0x81, 0xfb, 0x9c, 0x86, 0xcc, 0x0a, 0xdf, 0x53, 0x0d, 0xe7,
	0x66, 0xd0, 0x21, 0x28, 0x31, 0x89, 0xce, 0xa2, 0x66, 0xe9, 0xa6, 0x7c, 0xbb, 0xbe, 0xff, 0xa3,
	0x95, 0xbc, 0xd5, 0x07, 0x4c, 0xc5, 0xf4, 0xe2, 0xf0, 0x02, 0x27, 0xea, 0x6c, 0x1d, 0x7f, 0x12,
	0x07, 0x93, 0x98, 0xbd, 0xe2, 0xde, 0xd7, 0x70, 0x6e, 0x06, 0xdd, 0x84, 0xba, 0x43, 0x23, 0x3b,
	0x74, 0x03, 0x16, 0xc9, 0x66, 0x99, 0x0b, 0xe4, 0xa7, 0x50, 0x13, 0xb6, 0x4f, 0xfd, 0xd0, 0xa6,
	0x96, 0xd3, 0x54, 0xf8, 0xdb, 0x74, 0x88, 0x10, 0x94, 0x3d, 0x32, 0xa6, 0xcd, 0x0a, 0x9f, 0xe6,
	0xcf, 0xa8, 0x05, 0x55, 0xd7, 0x8b, 0x69, 0xe8, 0x91, 0xf3, 0xe6, 0xf6, 0x4d, 0xe9, 0x76, 0x15,
	0x4f, 0xc7, 0xa8, 0x0d, 0x55, 0x16, 0x08, 0xe6, 0x6d, 0xb3, 0xba, 0x24, 0x08, 0x06, 0x89, 0xc9,
	0x61, 0x1a, 0x84, 0xa9, 0x5a, 0xeb, 0x17, 0x00, 0xd9, 0x1e, 0x91, 0x0a, 0xf2, 0x19, 0xbd, 0x10,
	0xa7, 0xc7, 0x1e, 0xd1, 0x47, 0xa0, 0x70, 0x14, 0x89, 0x20, 0xdf, 0x5a, 0x68, 0x9f, 0x59, 0xe1,
	0xb6, 0x13, 0xf9, 0x9f, 0x94, 0x0e, 0x24, 0x0d, 0xc3, 0x4e, 0x7e, 0x59, 0xa4, 0xc1, 0x8e, 0xed,
	0x7b, 0x11, 0xf5, 0xe2, 0xce, 0x97, 0xd4, 0x3e, 0xe3, 0xeb, 0x54, 0x71, 0x61, 0x8e, 0x9d, 0x6f,
	0x10, 0xfa, 0xaf, 0xa8, 0x47, 0x3c, 0x3b, 0x59, 0xb5, 0x8a, 0x73, 0x33, 0xda, 0x9f, 0x64, 0x68,
	0x14, 0x31, 0x81, 0x0e, 0xa7, 0x60, 0x62, 0x06, 0x1b, 0xfb, 0xfa, 0x8a, 0x60, 0xd2, 0x8b, 0x98,
	0x42, 0x07, 0x50, 0x9b, 0x04, 0x0e, 0x89, 0xa9, 0xd3, 0x8e, 0xc5, 0x7e, 0x5b, 0x7a, 0x92, 0xa3,
	0x7a, 0x9a, 0xa3, 0xfa, 0x20, 0x4d, 0x62, 0x9c, 0x09, 0xa3, 0xa7, 0x29, 0xb8, 0x64, 0x0e, 0xae,
	0xfd, 0x55, 0x1d, 0x98, 0x87, 0xd7, 0x7d, 0x50, 0x68, 0x18, 0xfa, 0x21, 0x07, 0x4e, 0x7d, 0xff,
	0xc6, 0x42, 0x4b, 0x26, 0x93, 0xc2, 0x89, 0x70, 0xeb, 0xc5, 0x92, 0x28, 0xde, 0x2b, 0x46, 0xf1,
	0xdd, 0x2b, 0xa3, 0x98, 0x8f, 0xe0, 0x01, 0x54, 0xc4, 0x21, 0x03, 0x54, 0x7e, 0x3e, 0x34, 0x87,
	0xa6, 0xa1, 0x6e, 0xa1, 0x1a, 0x28, 0xd8, 0x6c, 0x1b, 0x9f, 0xa8, 0x12, 0x9b, 0x3e, 0x6c, 0x5b,
	0xc7, 0xa6, 0xa1, 0x96, 0x50, 0x1d, 0xb6, 0x0d, 0xf3, 0xd8, 0x1c, 0x98, 0x86, 0x2a, 0x6b, 0xff,
	0x96, 0x00, 0xa5, 0xbb, 0xb5, 0xbc, 0x57, 0xbe, 0xcd, 0x99, 0x6d, 0x33, 0xc4, 0xd3, 0x29, 0x10,
	0xcf, 0xde, 0xd2, 0xd3, 0xce, 0xd6, 0xcf, 0x51, 0x90, 0x35, 0x43, 0x41, 0x77, 0xd7, 0x31, 0x53,
	0x24, 0xa3, 0x3f, 0xc8, 0xf0, 0xce, 0xe5, 0x6b, 0x31, 0x38, 0xa7, 0xe6, 0x2c, 0x27, 0xa5, 0xa5,
	0x6c, 0x06, 0xf5, 0xa1, 0xe2, 0x7a, 0xc1, 0x24, 0x4e, 0x79, 0xe9, 0xe1, 0x9a, 0x9b, 0xd1, 0x2d,
	0xae, 0x9d, 0x60, 0x48, 0x98, 0x62, 0x9c, 0x11, 0x90, 0x90, 0x7a, 0xb1, 0xe5, 0x08, 0x86, 0x9a,
	0x8e, 0xd1, 0xc7, 0x50, 0x4d, 0x2d, 0x0b, 0x8c, 0xdd, 0x5a, 0xba, 0x24, 0x9e, 0xaa, 0xa0, 0x0f,
	0xa1, 0x6a, 0x50, 0xe2, 0x9c, 0xbb, 0x1e, 0xe5, 0xec, 0x75, 0x75, 0x8a, 0x4c, 0x65, 0xd1, 0x77,
	0xa0, 0x26, 0xd2, 0xdc, 0x72, 0x04, 0xbf, 0x65, 0x13, 0xad, 0xcf, 0xa1, 0x9e, 0xdb, 0xc7, 0x25,
	0x00, 0x7e, 0x50, 0x04, 0xf0, 0x7b, 0x8b, 0x01, 0xcc, 0xea, 0xde, 0x73, 0x26, 0x9a, 0x87, 0xf1,
	0xd7, 0x15, 0x68, 0x2e, 0x8a, 0x22, 0x3a, 0x99, 0xa1, 0x8f, 0x83, 0xb5, 0x81, 0xb0, 0x39, 0x22,
	0xc1, 0x45, 0x22, 0xf9, 0xe9, 0xfa, 0xae, 0xcc, 0x53, 0xca, 0x43, 0xa8, 0x24, 0xf5, 0x49, 0xc4,
	0x7b, 0xa5, 0xc3, 0x13, 0x2a, 0x68, 0x04, 0x3b, 0xce, 0x85, 0x47, 0xc6, 0xae, 0xcd, 0x0d, 0x37,
	0x15, 0xee, 0x57, 0x67, 0x7d, 0xbf, 0x8c, 0x9c, 0x95, 0xc4, 0xbd, 0x82, 0xe1, 0x8c, 0xf8, 0x2a,
	0x6b, 0x10, 0x1f, 0xb2, 0x60, 0x37, 0x71, 0xf4, 0x29, 0x25, 0x0e, 0x0d, 0x23, 0x5e, 0x22, 0x57,
	0xdc, 0x62, 0x51, 0xb3, 0x45, 0x96, 0x70, 0xe8, 0xc7, 0x45, 0x08, 0xbe, 0x7f, 0x25, 0x87, 0x66,
	0xdb, 0xcf, 0xc1, 0xb0, 0xf5, 0x39, 0x7c, 0x63, 0xee, 0x18, 0x36, 0xc9, 0xd6, 0x9f, 0x4d, 0xd9,
	0xba, 0x0e, 0xdb, 0xc3, 0xee, 0x51, 0xb7, 0xf7, 0xa2, 0xab, 0x6e, 0xa1, 0x5d, 0xa8, 0xf5, 0x3b,
	0x4f, 0x4d, 0x63, 0xc8, 0x68, 0x5a, 0x42, 0x6f, 0x41, 0xdd, 0xea, 0x7e, 0x71, 0x82, 0x7b, 0x4f,
	0xb0, 0xd9, 0xef, 0xab, 0x25, 0xfe, 0x7e, 0xd8, 0xe9, 0x98, 0xa6, 0xc1, 0x98, 0x3b, 0x47, 0xe9,
	0x65, 0x66, 0xa7, 0xfd, 0xb8, 0x87, 0x19, 0xa5, 0x2b, 0xda, 0x7f, 0x24, 0x50, 0x0d, 0x1a, 0x50,
	0xcf, 0xa1, 0x9e, 0x7d, 0xd1, 0xf1, 0xbd, 0x53, 0x77, 0x84, 0xfa, 0x50, 0x0d, 0xe9, 0xaf, 0x26,
	0x6e, 0x48, 0x59, 0xfe, 0x30, 0x70, 0x7c, 0xb4, 0xb8, 0x07, 0x99, 0x51, 0xd6, 0xb1, 0xd0, 0x4c,
	0x00, 0x31, 0x35, 0x84, 0xde, 0x06, 0x85, 0xbc, 0x26, 0x6e, 0x92, 0x3c, 0x0a, 0x4e, 0x06, 0x2d,
	0x0f, 0x76, 0x0b, 0x0a, 0x97, 0x1c, 0xdd, 0x93, 0xe2, 0xd1, 0xdd, 0xbd, 0xf2, 0xe8, 0x32, 0x77,
	0x4e, 0x48, 0x48, 0xc6, 0x34, 0xa6, 0x61, 0x94, 0x3f, 0xce, 0xbf, 0x49, 0x50, 0xe6, 0x3d, 0xdd,
	0x46, 0x8a, 0xd6, 0x8f, 0x0b, 0x45, 0x6b, 0x85, 0x46, 0x2a, 0x29, 0x53, 0x0f, 0x67, 0xca, 0xd4,
	0x7b, 0x57, 0x2b, 0x16, 0x0b, 0xd3, 0x5f, 0x15, 0xa8, 0xa6, 0xf6, 0x58, 0x67, 0x7a, 0x3a, 0xf1,
	0x6c, 0x0e, 0x4a, 0x7a, 0x2a, 0x4e, 0x2d, 0x3f, 0x85, 0xcc, 0x99, 0x62, 0x74, 0x67, 0xa9, 0x93,
	0x97, 0x96, 0x9f, 0xa3, 0x1c, 0x24, 0x12, 0x1e, 0xdb, 0x5b, 0x6e, 0x68, 0x29, 0x14, 0xca, 0x39,
	0x28, 0xe4, 0x38, 0x4d, 0x59, 0x9f, 0xd3, 0xe6, 0x48, 0xa3, 0x72, 0x5d, 0xd2, 0x40, 0xf7, 0x60,
	0x9b, 0xdd, 0xea, 0xfc, 0x49, 0x2c, 0x98, 0xe7, 0xdb, 0x73, 0x3c, 0x6f, 0x88, 0x4b, 0x1d, 0x4e,
	0x25, 0x51, 0x1f, 0xde, 0xa2, 0xbf, 0xa6, 0x76, 0xc7, 0xf7, 0xa2, 0x38, 0x24, 0xae, 0x17, 0x47,
	0xa2, 0x7b, 0xff, 0xfe, 0xd5, 0x70, 0x15, 0x3d, 0x3b, 0x07, 0xc7, 0xac, 0x85, 0x37, 0x5d, 0x42,
	0xff, 0xef, 0xc9, 0xf7, 0x67, 0x09, 0xd4, 0xd9, 0x5d, 0xa3, 0x07, 0x50, 0xfd, 0x8d, 0xef, 0xd1,
	0x63, 0x5f, 0x5c, 0x1e, 0x1a, 0x57, 0x90, 0xe3, 0xa7, 0xbe, 0x47, 0xf1, 0x54, 0x3c, 0x55, 0x7d,
	0xea, 0x7a, 0x09, 0xab, 0xac, 0xa6, 0xca, 0xc4, 0x59, 0xef, 0x32, 0x9e, 0x9c, 0xc7, 0x2e, 0x9b,
	0xe6, 0x59, 0x58, 0xc5, 0xd9, 0x84, 0xf6, 0x4f, 0x39, 0x29, 0x1c, 0x82, 0x79, 0x1f, 0xcf, 0x74,
	0x13, 0x1f, 0xac, 0x90, 0xaf, 0x9b, 0xeb, 0x1f, 0xee, 0x83, 0x72, 0xca, 0xb3, 0x5b, 0x5e, 0x52,
	0x45, 0x0f, 0x99, 0x14, 0x4e, 0x84, 0xaf, 0x77, 0xe9, 0x40, 0x27, 0x50, 0x23, 0xe7, 0x31, 0x37,
	0x94, 0xf6, 0x05, 0xfb, 0xab, 0x6c, 0xb6, 0x9d, 0x2a, 0x25, 0xa9, 0x9e, 0x19, 0x69, 0xfd, 0x12,
	0x1a, 0xc5, 0x97, 0x97, 0x80, 0xec, 0x7e, 0x11, 0x64, 0x4b, 0x77, 0x98, 0x21, 0xea, 0x87, 0xf9,
	0xea, 0xd8, 0x1f, 0xb4, 0x79, 0x55, 0x5b, 0x74, 0x99, 0xd1, 0xbe, 0x96, 0xa0, 0xb9, 0x08, 0xa7,
	0x68, 0x00, 0x65, 0xb6, 0x88, 0x08, 0xf1, 0xcf, 0xd6, 0x06, 0x7a, 0xae, 0x12, 0xb2, 0x6c, 0xc3,
	0xdc, 0x1a, 0xa7, 0xba, 0x73, 0x97, 0x44, 0x7c, 0x6b, 0x35, 0x9c, 0x0c, 0xb4, 0x87, 0xd0, 0x28,
	0x4a, 0xa3, 0x2a, 0x94, 0x8d, 0xf6, 0xa0, 0xad, 0x6e, 0xb1, 0x8d, 0x74, 0x7a, 0xdd, 0x01, 0xee,
	0x1d, 0xab, 0x12, 0x42, 0xd0, 0x30, 0x3e, 0xe9, 0xb6, 0x9f, 0x59, 0x9d, 0x2f, 0x7a, 0xc3, 0xc1,
	0xc9, 0x70, 0xa0, 0x96, 0xb4, 0x7f, 0x49, 0xd0, 0x28, 0xf6, 0x23, 0x9b, 0x29, 0x66, 0x8f, 0x0a,
	0xc5, 0xec, 0x07, 0x2b, 0xf6, 0x42, 0xb9, 0xb2, 0x66, 0xce, 0x94, 0xb5, 0x3b, 0xab, 0x9a, 0x98,
	0xfb, 0x0c, 0x84, 0xe6, 0xd7, 0xc8, 0xd2, 0x40, 0x5a, 0x27, 0x0d, 0xde, 0x81, 0x0a, 0xeb, 0x98,
	0x2d, 0x47, 0x04, 0x40, 0x8c, 0x50, 0x6f, 0x5a, 0x16, 0xe5, 0x25, 0x0d, 0xce, 0xbc, 0x2b, 0x97,
	0x16, 0x48, 0x0d, 0x76, 0xdc, 0xa9, 0x94, 0xe5, 0x88, 0x8f, 0x44, 0x85, 0x39, 0x74, 0x17, 0xca,
	0x6c, 0x79, 0x51, 0xdf, 0x96, 0xf4, 0x80, 0x5c, 0xb4, 0x70, 0x37, 0xab, 0xac, 0x7e, 0x37, 0x7b,
	0xe3, 0xb7, 0xaf, 0xbf, 0xcb, 0xf0, 0xf6, 0x65, 0x51, 0x44, 0xc7, 0x33, 0x5c, 0x79, 0x7f, 0x2d,
	0x10, 0x6c, 0x8e, 0x35, 0xb3, 0x6e, 0x42, 0x5e, 0xbf, 0x9b, 0xb8, 0x1e, 0x79, 0xce, 0xf5, 0x20,
	0xca, 0x75, 0x7b, 0x10, 0xed, 0xab, 0x37, 0xda, 0xf5, 0x73, 0xb2, 0x3c, 0xb2, 0x4e, 0x4e, 0x4c,
	0x43, 0xad, 0x68, 0xbf, 0x97, 0xa0, 0x51, 0x24, 0x05, 0xd4, 0x80, 0x92, 0x9b, 0x7e, 0xd9, 0x28,
	0xb9, 0xd9, 0x47, 0xcc, 0x52, 0xee, 0x23, 0xe6, 0x01, 0xd4, 0xec, 0x90, 0x8a, 0xd0, 0xc8, 0xcb,
	0x43, 0x33, 0x15, 0x46, 0x37, 0x00, 0x46, 0xd4, 0xa3, 0x49, 0x0b, 0xc5, 0x8f, 0x58, 0xc6, 0xb9,
	0x19, 0xed, 0x16, 0x28, 0xfc, 0x5c, 0x51, 0x13, 0xb6, 0xc7, 0x34, 0x8a, 0xc8, 0x88, 0x0a, 0x5f,
	0xd2, 0xa1, 0xf6, 0x5b, 0x09, 0x14, 0x9e, 0xe7, 0x4c, 0x26, 0x9c, 0x78, 0xac, 0x0d, 0x13, 0xde,
	0xa5, 0x43, 0x56, 0xe2, 0x99, 0xa3, 0x51, 0x40, 0x6c, 0x2a, 0x3e, 0x99, 0x64, 0x13, 0x6c, 0x8b,
	0x96, 0x21, 0xb2, 0xb4, 0x64, 0x19, 0x2c, 0x37, 0x59, 0x73, 0xc0, 0x63, 0xb6, 0xb4, 0x8f, 0xe0,
	0xa2, 0xda, 0x5f, 0x24, 0xd8, 0xcd, 0x42, 0xf8, 0x8c, 0x04, 0xac, 0x5b, 0xe2, 0xcf, 0xe2, 0xd6,
	0x74, 0x77, 0x85, 0xc8, 0x3f, 0x23, 0x81, 0xce, 0x1f, 0xc4, 0xfd, 0x9e, 0x3f, 0xb7, 0x3e, 0x03,
	0xc8, 0x26, 0x37, 0x9f, 0xbd, 0x47, 0xd0, 0xc8, 0x5e, 0x1c, 0xbb, 0x51, 0xcc, 0x0c, 0xe6, 0x3d,
	0x5f, 0xcd, 0x20, 0xff, 0xd3, 0x7e, 0x27, 0xc1, 0x6e, 0x27, 0xf9, 0xec, 0x23, 0x30, 0x6b, 0xce,
	0x70, 0xc0, 0xe2, 0x42, 0x50, 0xd0, 0x9b, 0x49, 0x7e, 0x4d, 0xcf, 0x27, 0xc1, 0x13, 0xdc, 0xee,
	0x26, 0xc5, 0xbd, 0x0e, 0xdb, 0xd8, 0x7c, 0xde, 0x3b, 0xe2, 0x29, 0x00, 0x50, 0x39, 0x69, 0x0f,
	0xfb, 0xbc, 0xbc, 0xff, 0x57, 0x82, 0x72, 0xd7, 0x77, 0x28, 0xfa, 0xb0, 0x50, 0xca, 0xb5, 0x85,
	0xab, 0x33, 0x61, 0x3d, 0x57, 0xac, 0x55, 0x90, 0x63, 0x32, 0x12, 0x38, 0x62, 0x8f, 0xec, 0xda,
	0x4e, 0x9d, 0x11, 0x8d, 0x9a, 0x65, 0x7e, 0x2c, 0xef, 0x5e, 0x69, 0x0a, 0x27, 0xb2, 0xe8, 0x11,
	0xd4, 0x83, 0x90, 0x3a, 0xd4, 0xa6, 0x51, 0xe4, 0x87, 0x4b, 0xd9, 0x9e, 0xab, 0xe6, 0x35, 0xb4,
	0x7b, 0x50, 0x4e, 0x9b, 0x82, 0x41, 0xbb, 0x7f, 0xa4, 0x6e, 0xa1, 0x1d, 0xa8, 0xb2, 0xf6, 0xe0,
	0xf0, 0xb8, 0xf7, 0x42, 0x95, 0xd8, 0x3c, 0xee, 0xf5, 0x06, 0x6a, 0x89, 0x35, 0x3a, 0xc3, 0xae,
	0x61, 0x1e, 0xaa, 0xf2, 0x07, 0x0f, 0xa0, 0xcc, 0xb0, 0x99, 0x4d, 0x6d, 0xa1, 0x0a, 0x94, 0xba,
	0xac, 0x8b, 0xa8, 0x40, 0xc9, 0x30, 0xd5, 0x12, 0xfb, 0xb7, 0xb0, 0x2a, 0xb3, 0xff, 0xf6, 0x50,
	0x2d, 0xb3, 0xff, 0x43, 0xac, 0x2a, 0x8f, 0xb7, 0x3f, 0x55, 0xb8, 0x2b, 0x2f, 0x2b, 0x3c, 0x71,
	0xef, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x74, 0xa0, 0xfd, 0xf2, 0x17, 0x1b, 0x00, 0x00,
}
